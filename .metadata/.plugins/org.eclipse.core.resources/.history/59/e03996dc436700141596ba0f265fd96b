/*
 * hashTable.cpp
 *
 *  Created on: 8 lis 2014
 *      Author: pawols
 */


#include <iostream>
#include <cassert>
#include <list>


using namespace std;

template<int size, typename elem_type> class HashTable {
	 public:
		  HashTable();

		  void insert(elem_type value);
		  bool contains(elem_type value) const;

	 private:
		  long long int hash(elem_type value);
		  list<elem_type> tab[size];
		  long long int p = 4294967296;
};


template<int size, typename elem_type>HashTable<size,elem_type>::HashTable()
{

}


template<int size, typename elem_type> void HashTable<size, elem_type>::insert(elem_type value)
{

		tab[hash(value)].push_front(value);
}

template<int size, typename elem_type> long long int HashTable<size, elem_type>::hash(elem_type value)
{
	return (value*2654435761 % p)%size;
}

template<int size, typename elem_type> bool HashTable<size, elem_type>::contains(elem_type value) const
{
	auto it = tab[hash(value)].begin();
	while(it!=tab[hash(value).end()])
	{
		if(*it == value)
			return true;
		it++;
	}
	return false;
}

void test()
{
	 HashTable<1007, long long int>  c;
	 c.insert(3);
	 c.insert(1);
     c.insert(5);
     cout<<c.contains(4)<<endl;;
  //  assert(c.contains(3));
  /*   assert(c.contains(1));
     assert(c.contains(5));
     assert(!c.contains(10));

     for(int i = 0; i < 10; ++i)
     {
    	 c.insert(i);
     }
     for(int i = 0; i < 10; ++i)
     {
    	 assert(c.contains(i));
     }*/
}
int main()
{
	test();
	 return 0;
}


